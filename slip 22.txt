22.1

def print_board(board):
    for i in range(0, 9, 3):
        print(board[i:i + 3])
    print()
def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  
        [0, 4, 8], [2, 4, 6]             
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None
def is_full(board):
    return ' ' not in board
def alpha_beta(board, depth, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    elif winner == 'O':
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        max_eval = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                eval = alpha_beta(board, depth + 1, False, alpha, beta)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break 
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                eval = alpha_beta(board, depth + 1, True, alpha, beta)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break  
        return min_eval
def find_best_move(board):
    best_score = -float('inf')
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            score = alpha_beta(board, 0, False, -float('inf'), float('inf'))
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move
def play_tic_tac_toe():
    board = [' ' for _ in range(9)]

    while True:
        print_board(board)
        winner = check_winner(board)
        if winner == 'X':
            print("Computer wins!")
            break
        elif winner == 'O':
            print("You win!")
            break
        elif is_full(board):
            print("It's a draw!")
            break
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'O'
        else:
            print("Invalid move, try again.")
            continue
        best_move = find_best_move(board)
        board[best_move] = 'X'
        print(f"Computer chose position {best_move}")

if __name__ == "__main__":
    play_tic_tac_toe()


22.2

def chatbot():
    print("Hello! I am your friendly chatbot. Type 'exit' to end the conversation.")
    
    while True:
        user_input = input("You: ").lower()

        if user_input == 'exit':
            print("Goodbye! Have a nice day.")
            break
        
        elif 'how are you' in user_input:
            print("Chatbot: I'm doing great, thank you for asking!")
        elif 'hello' in user_input or 'hi' in user_input:
            print("Chatbot: Hello! How can I assist you today?")
        elif 'your name' in user_input:
            print("Chatbot: I am a simple chatbot. I don't have a name, but you can call me Chatbot!")
        elif 'bye' in user_input:
            print("Chatbot: Goodbye!")
        else:
            print("Chatbot: I'm sorry, I don't understand that. Could you ask something else?")
            
chatbot()
