14.1

def sort_sentence(sentence):
    words = sentence.split()
    words.sort()
    sorted_sentence = ' '.join(words)    
    return sorted_sentence
sentence = input("Enter a sentence: ")
sorted_sentence = sort_sentence(sentence)
print("Sorted sentence:", sorted_sentence)


14.2

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col] == "Q":
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == "Q":
            return False
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == "Q":
            return False

    return True
def solve_nqueens(board, row):
    if row == len(board):
        print_board(board)
        print()
        return True

    found_solution = False
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = "Q"
            found_solution = solve_nqueens(board, row + 1) or found_solution
            board[row][col] = "."

    return found_solution
def print_board(board):
    for row in board:
        print(" ".join(row))
def n_queens(n):
    board = [["." for _ in range(n)] for _ in range(n)]
    if not solve_nqueens(board, 0):
        print("No solution found.")
n = int(input("Enter the value of N: "))
n_queens(n)
