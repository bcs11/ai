4.1

import random
def hangman():
    words = ['python', 'hangman', 'programming', 'developer', 'algorithm']
    word = random.choice(words)  
    guessed_word = ['_'] * len(word)  
    attempts = 6  
    guessed_letters = []  
    print("Welcome to Hangman!")
    print("Try to guess the word.")
    print("The word has", len(word), "letters.")
    while attempts > 0:
        print("Word:", ' '.join(guessed_word))
        print("Attempts left:", attempts)
        print("Guessed letters:", ' '.join(guessed_letters))
        guess = input("Enter a letter: ").lower()
        if guess in guessed_letters:
            print("You already guessed that letter.")
            continue      
        if guess in word:
            for i in range(len(word)):
                if word[i] == guess:
                    guessed_word[i] = guess
            print("Good job! You found a letter.")
        else:
            attempts -= 1
            print("Oops! That letter is not in the word.")
        
        guessed_letters.append(guess)
        if ''.join(guessed_word) == word:
            print("Congratulations! You guessed the word:", word)
            break
    if ''.join(guessed_word) != word:
        print("Sorry, you lost! The word was:", word)
hangman()

4.2

graph ={
    '1':['2','3'],
    '2':['4','5'],
    '3':['6','7'],
    '4':['8'],
    '5':['8'],
    '6':['8'],
    '7':['8'],
    '8':[ ]
}
visited = [] 
queue = []  
def bfs(visited, graph, node): 
  visited.append(node)
  queue.append(node)
    
  while queue: 
       m = queue.pop(0)
       print (m, end = " ")
        
       for neighbour in graph[m]:
          if neighbour not in visited:
            visited.append(neighbour)
            queue.append(neighbour)
print("Following is the Breadth-First Search")
bfs(visited, graph, '1') 

