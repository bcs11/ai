12.1

import calendar
def generate_calendar(year, month):
    print(calendar.month(year, month))
year = int(input("Enter the year: "))
month = int(input("Enter the month (1-12): "))
generate_calendar(year, month)


12.2

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col] == "Q":
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == "Q":
            return False

    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == "Q":
            return False
    return True
def solve_nqueens(board, row):
    if row == len(board):
        print_board(board)
        return True

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = "Q"
            if solve_nqueens(board, row + 1):
                return True
            board[row][col] = "."

    return False
def print_board(board):
    for row in board:
        print(" ".join(row))
    print()
n = 4
board = [["." for _ in range(n)] for _ in range(n)]
if not solve_nqueens(board, 0):
    print("No solution found.")
