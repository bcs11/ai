17.1
def function(x):
    return -x**2 + 4*x
def hill_climbing(initial_x, step_size, max_iterations):
    x = initial_x  
    for _ in range(max_iterations):
        current_value = function(x)
        next_x_pos = x + step_size
        next_x_neg = x - step_size 
        next_value_pos = function(next_x_pos)
        next_value_neg = function(next_x_neg)
        if next_value_pos > current_value:
            x = next_x_pos
        elif next_value_neg > current_value:
            x = next_x_neg
        else:
            print(f"Maximum found at x = {x} with value = {current_value}")
            return x, current_value
    print(f"Maximum found at x = {x} with value = {function(x)}")
    return x, function(x)
initial_x = 0  
step_size = 0.1  
max_iterations = 100 
hill_climbing(initial_x, step_size, max_iterations)




17.2

from queue import PriorityQueue


graph = {
    'A': {'B': 9, 'D': 7},
    'B': {'A': 9, 'E': 11},
    'C': {'A': 4, 'E': 12, 'F': 12},
    'D': {'F': 14, 'A': 7},
    'E': {'B': 11, 'C': 17, 'F':9 , 'G':5},
    'F': {'C':12, 'G':9, 'D': 14},
    'G': {'E': 5, 'F': 9}
}


heuristic = {
    'A': 21,
    'B': 14,
    'C': 18,
    'D': 18,
    'E': 5,
    'F': 8,
    'G': 0
}


def a_star_algorithm(start_node, goal_node):
    
    open_set = PriorityQueue()
    open_set.put((0, start_node))  
    
    
    g_costs = {node: float('inf') for node in graph}
    g_costs[start_node] = 0
    

    came_from = {}
    
    while not open_set.empty():

        current_f, current_node = open_set.get()
        
 
        if current_node == goal_node:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start_node)
            path.reverse()
            return path, g_costs[goal_node]
        
      
        for neighbor, weight in graph[current_node].items():
            tentative_g = g_costs[current_node] + weight
            
            if tentative_g < g_costs[neighbor]:
                came_from[neighbor] = current_node
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic[neighbor]
                open_set.put((f_cost, neighbor))
                
    return None, float('inf')


start_node = 'A'
goal_node = 'G'
path, cost = a_star_algorithm(start_node, goal_node)

print("Path:", path)
print("Total cost:", cost)