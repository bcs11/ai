20.1

def chatbot():
    print("Hello! I am your college assistant bot. How can I help you today?")
    print("You can ask me about courses, events, contact info, or timetable.")

    while True:
        user_input = input("You: ").strip().lower()

        if "course" in user_input:
            print("We offer courses like Computer Science, Mechanical Engineering, and Business Administration.")
        elif "event" in user_input:
            print("Upcoming events: Hackathon on Nov 20, Sports Day on Dec 5, and Tech Fest on Dec 15.")
        elif "timetable" in user_input:
            print("Classes start at 9 AM. You can ask about specific course timings if needed.")
        elif "contact" in user_input:
            print("You can reach the admin office at 123-456-7890 or email at admin@college.edu.")
        elif "exit" in user_input or "quit" in user_input:
            print("Goodbye! Have a great day.")
            break
        else:
            print("I'm sorry, I didn't understand that. You can ask about courses, events, contact info, or timetable.")

if __name__ == "__main__":
    chatbot()


20.2

def print_board(board):
    for i in range(0, 9, 3):
        print(board[i:i + 3])
    print()
def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  
        [0, 4, 8], [2, 4, 6]              
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None
def is_full(board):
    return ' ' not in board
def minimax(board, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    elif winner == 'O':
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, False)
                board[i] = ' '
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, True)
                board[i] = ' '
                best_score = min(best_score, score)
        return best_score
def find_best_move(board):
    best_score = -float('inf')
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move
def play_tic_tac_toe():
    board = [' ' for _ in range(9)]

    while True:
        print_board(board)
        winner = check_winner(board)
        if winner == 'X':
            print("Computer wins!")
            break
        elif winner == 'O':
            print("You win!")
            break
        elif is_full(board):
            print("It's a draw!")
            break
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'O'
        else:
            print("Invalid move, try again.")
            continue
        best_move = find_best_move(board)
        board[best_move] = 'X'
        print(f"Computer chose position {best_move}")

if __name__ == "__main__":
    play_tic_tac_toe()
