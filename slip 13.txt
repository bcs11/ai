13.1

def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], 
        [0, 3, 6], [1, 4, 7], [2, 5, 8], 
        [0, 4, 8], [2, 4, 6]            
    ]

    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None
def is_full(board):
    return ' ' not in board
def minimax(board, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    elif winner == 'O':
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, False)
                board[i] = ' '
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, True)
                board[i] = ' '
                best_score = min(best_score, score)
        return best_score
def find_best_move(board):
    best_score = -float('inf')
    best_move = -1

    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i

    return best_move
def play_tic_tac_toe():
    board = [' ' for _ in range(9)]

    while True:
        for i in range(0, 9, 3):
            print(board[i:i + 3])
        print()
        if check_winner(board) == 'X':
            print("X wins!")
            break
        elif check_winner(board) == 'O':
            print("O wins!")
            break
        elif is_full(board):
            print("It's a draw!")
            break
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'O'
        else:
            print("Invalid move, try again.")
            continue
        best_move = find_best_move(board)
        board[best_move] = 'X'
        print(f"Computer chose position {best_move}")

if __name__ == "__main__":
    play_tic_tac_toe()


13.2

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col] == "Q":
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == "Q":
            return False
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == "Q":
            return False

    return True
def solve_nqueens(board, row):
    if row == len(board):
        print_board(board)
        return True
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = "Q"
            if solve_nqueens(board, row + 1):
                return True
            board[row][col] = "."
    return False
def print_board(board):
    for row in board:
        print(" ".join(row))
    print()
n = 8
board = [["." for _ in range(n)] for _ in range(n)]
if not solve_nqueens(board, 0):
    print("No solution found.")
