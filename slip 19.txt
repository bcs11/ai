19.1

import random
def hangman():
    words = ['python', 'hangman', 'programming', 'developer', 'algorithm']
    word = random.choice(words)  
    guessed_word = ['_'] * len(word)  
    attempts = 6  
    guessed_letters = []  
    print("Welcome to Hangman!")
    print("Try to guess the word.")
    print("The word has", len(word), "letters.")
    while attempts > 0:
        print("Word:", ' '.join(guessed_word))
        print("Attempts left:", attempts)
        print("Guessed letters:", ' '.join(guessed_letters))
        guess = input("Enter a letter: ").lower()
        if guess in guessed_letters:
            print("You already guessed that letter.")
            continue      
        if guess in word:
            for i in range(len(word)):
                if word[i] == guess:
                    guessed_word[i] = guess
            print("Good job! You found a letter.")
        else:
            attempts -= 1
            print("Oops! That letter is not in the word.")
        
        guessed_letters.append(guess)
        if ''.join(guessed_word) == word:
            print("Congratulations! You guessed the word:", word)
            break
    if ''.join(guessed_word) != word:
        print("Sorry, you lost! The word was:", word)
hangman()


19.2

from queue import PriorityQueue


graph = {
    'A': {'B': 2, 'E': 3},
    'B': {'A': 2, 'C': 1},
    'C': {'B': 1},
    'D': {'F': 1, 'E': 6},
    'E': {'A': 3, 'D': 6},
    'F': {'D': 1}
}


heuristic = {
    'A': 11,
    'B': 6,
    'C': 99,
    'D': 1,
    'E': 7,
    'F': 0
}


def a_star_algorithm(start_node, goal_node):
    
    open_set = PriorityQueue()
    open_set.put((0, start_node))  
    
    
    g_costs = {node: float('inf') for node in graph}
    g_costs[start_node] = 0
    

    came_from = {}
    
    while not open_set.empty():

        current_f, current_node = open_set.get()
        
 
        if current_node == goal_node:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start_node)
            path.reverse()
            return path, g_costs[goal_node]
        
      
        for neighbor, weight in graph[current_node].items():
            tentative_g = g_costs[current_node] + weight
            
            if tentative_g < g_costs[neighbor]:
                came_from[neighbor] = current_node
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic[neighbor]
                open_set.put((f_cost, neighbor))
                
    return None, float('inf')


start_node = 'A'
goal_node = 'F'
path, cost = a_star_algorithm(start_node, goal_node)

print("Path:", path)
print("Total cost:", cost)