25.1

def chatbot():
    print("Hello! I am your college assistant bot. How can I help you today?")
    print("You can ask me about courses, events, contact info, or timetable.")

    while True:
        user_input = input("You: ").strip().lower()

        if "course" in user_input:
            print("We offer courses like Computer Science, Mechanical Engineering, and Business Administration.")
        elif "event" in user_input:
            print("Upcoming events: Hackathon on Nov 20, Sports Day on Dec 5, and Tech Fest on Dec 15.")
        elif "timetable" in user_input:
            print("Classes start at 9 AM. You can ask about specific course timings if needed.")
        elif "contact" in user_input:
            print("You can reach the admin office at 123-456-7890 or email at admin@college.edu.")
        elif "exit" in user_input or "quit" in user_input:
            print("Goodbye! Have a great day.")
            break
        else:
            print("I'm sorry, I didn't understand that. You can ask about courses, events, contact info, or timetable.")

if __name__ == "__main__":
    chatbot()
	
	25.2
	
	
	from collections import deque

def find_blank(state):
    return state.index(0)

def get_neighbors(state):
    neighbors = []
    blank_index = find_blank(state)
    x, y = divmod(blank_index, 3) 
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  
    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:  # Check bounds
            new_blank_index = new_x * 3 + new_y
            new_state = state[:]
            new_state[blank_index], new_state[new_blank_index] = new_state[new_blank_index], new_state[blank_index]
            neighbors.append(new_state)

    return neighbors

def bfs(start, goal):
    queue = deque([(start, [])])  
    visited = set()

    while queue:
        current_state, path = queue.popleft()

        if current_state == goal:
            return path + [current_state]

        visited.add(tuple(current_state))

        for neighbor in get_neighbors(current_state):
            if tuple(neighbor) not in visited:
                queue.append((neighbor, path + [current_state]))

    return None

def print_puzzle(state):
    for i in range(0, 9, 3):
        print(state[i:i + 3])
    print()

if __name__ == "__main__":
    start_state = [1, 2, 3, 4, 0, 5, 6, 7, 8]
    goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]

    print("Initial State:")
    print_puzzle(start_state)

    solution = bfs(start_state, goal_state)

    if solution:
        print("Solution found!")
        for step in solution:
            print_puzzle(step)
    else:
        print("No solution exists.")
