23.1


def tower_of_hanoi(n, source, auxiliary, destination):
    if n == 1:
        print(f"Move disk 1 from {source} to {destination}")
        return
    tower_of_hanoi(n - 1, source, destination, auxiliary)
    print(f"Move disk {n} from {source} to {destination}")
    tower_of_hanoi(n - 1, auxiliary, source, destination)
n = int(input("Enter the number of disks: "))
tower_of_hanoi(n, 'A', 'B', 'C')


23.2

import itertools
letters = 'SENDMORY'
def solve_cryptarithm():
    for perm in itertools.permutations(range(10), len(letters)):
        mapping = dict(zip(letters, perm))
        S, E, N, D = mapping['S'], mapping['E'], mapping['N'], mapping['D']
        M, O, R, Y = mapping['M'], mapping['O'], mapping['R'], mapping['Y']
        if S == 0 or M == 0:
            continue
        SEND = 1000 * S + 100 * E + 10 * N + D
        MORE = 1000 * M + 100 * O + 10 * R + E
        MONEY = 10000 * M + 1000 * O + 100 * N + 10 * E + Y
        if SEND + MORE == MONEY:
            print("Solution found!")
            print(f"SEND: {SEND}, MORE: {MORE}, MONEY: {MONEY}")
            print("Letter Mapping:", mapping)
            return
    print("No solution found.")
solve_cryptarithm()
