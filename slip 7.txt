7.1
import math
board = [' ' for _ in range(9)]
def print_board():
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")
    print()
def check_winner(board, player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]
    for condition in win_conditions:
        if board[condition[0]] == board[condition[1]] == board[condition[2]] == player:
            return True
    return False
def is_board_full(board):
    return ' ' not in board
def minimax(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, 'X'):
        return 10 - depth
    if check_winner(board, 'O'):
        return depth - 10
    if is_board_full(board):
        return 0
    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                eval = minimax(board, depth + 1, alpha, beta, False)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                eval = minimax(board, depth + 1, alpha, beta, True)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval
def find_best_move(board):
    best_move = -1
    best_value = -math.inf
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            move_value = minimax(board, 0, -math.inf, math.inf, False)
            board[i] = ' '
            if move_value > best_value:
                best_value = move_value
                best_move = i
    return best_move
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print_board()

    while True:
        # Player's Move
        player_move = int(input("Enter your move (0-8): "))
        if board[player_move] == ' ':
            board[player_move] = 'O'
        else:
            print("Invalid move. Try again.")
            continue
        if check_winner(board, 'O'):
            print_board()
            print("You win!")
            break
        if is_board_full(board):
            print_board()
            print("It's a tie!")
            break
        print("Computer's move:")
        best_move = find_best_move(board)
        board[best_move] = 'X'
        
        if check_winner(board, 'X'):
            print_board()
            print("Computer wins!")
            break
        if is_board_full(board):
            print_board()
            print("It's a tie!")
            break
        print_board()
play_game()


7.2

def chatbot():
    print("Hello! I am your friendly chatbot. Type 'exit' to end the conversation.")
    
    while True:
        user_input = input("You: ").lower()

        if user_input == 'exit':
            print("Goodbye! Have a nice day.")
            break
        
        elif 'how are you' in user_input:
            print("Chatbot: I'm doing great, thank you for asking!")
        elif 'hello' in user_input or 'hi' in user_input:
            print("Chatbot: Hello! How can I assist you today?")
        elif 'your name' in user_input:
            print("Chatbot: I am a simple chatbot. I don't have a name, but you can call me Chatbot!")
        elif 'bye' in user_input:
            print("Chatbot: Goodbye!")
        else:
            print("Chatbot: I'm sorry, I don't understand that. Could you ask something else?")
            
chatbot()
